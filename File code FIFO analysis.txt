
-- FIFO: first in, first out
-- chọn thời gian mặc định để tính tuổi hợp đồng là '2021-04-01'
-- Tính datediff
with table_seg_age as (
select * 
, CASE WHEN DATEDIFF(day, created_at, '2021-04-01') < 30 THEN 'AGE 0-30'
	WHEN DATEDIFF(day, created_at, '2021-04-01') < 60 THEN 'AGE 30-60'
	WHEN DATEDIFF(day, created_at, '2021-04-01') < 90 THEN 'AGE 60-90'
	ELSE 'AGE 90+'
	END as segmentation_age
from movement m 
WHERE created_at <= '2021-04-01' )

, table_quantity as (
	SELECT sku, segmentation_age
	, SUM(balance) as quantity 
	 
	FROM table_seg_age
	group by sku, segmentation_age )

, table_full_age as (
	select sku, quantity as 'AGE FULL'
	from table_quantity )
	
, table_age_30 as(
	select sku, quantity as 'AGE 0-30'
	from table_quantity
	WHERE segmentation_age = 'AGE 0-30' )

	
, table_age_60 as(
	select sku, quantity as 'AGE 30-60'
	from table_quantity
	WHERE segmentation_age = 'AGE 30-60' )

	
, table_age_90 as(
	select sku, quantity as 'AGE 60-90'
	from table_quantity
	WHERE segmentation_age = 'AGE 60-90' )

, table_age_over_90 as (
	select sku, quantity as 'AGE 90+'
	from table_quantity
	WHERE segmentation_age = 'AGE 90+')

-- Dùng pp PIVOT

	select DISTINCT table_full_age.sku
	, (COALESCE([AGE 0-30], 0) + COALESCE ([AGE 30-60], 0) + COALESCE ([AGE 60-90], 0) + COALESCE ([AGE 90+], 0)) as Stock
	, COALESCE([AGE 0-30], 0) as [AGE 0-30]
	, COALESCE ([AGE 30-60], 0) as [AGE 30-60]
	, COALESCE ([AGE 60-90], 0) as [AGE 60-90]
	, COALESCE ([AGE 90+], 0) as [AGE 90+]
	from table_full_age
	LEFT JOIN table_age_30
	ON table_full_age.sku = table_age_30.sku
	LEFT JOIN table_age_60
	ON table_full_age.sku = table_age_60.sku
	LEFT JOIN table_age_90
	ON table_full_age.sku = table_age_90.sku
	LEFT JOIN table_age_over_90
	ON table_full_age.sku = table_age_over_90.sku